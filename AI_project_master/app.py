# app.py ‚Äî ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô / ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
import streamlit as st
import pandas as pd
import joblib, json, os, time
from pathlib import Path

st.set_page_config(page_title="Earthquake Alert", page_icon="üåé", layout="wide")

DATA_PATH  = "AI_project_master/data/earthquakes.csv"
MODEL_PATH = "AI_project_master/earthquake_model.pkl"
ENC_PATH   = "AI_project_master/label_encoder.pkl"
ANN_PATH   = "AI_project_master/storage/public_announcements.json"

st.title("üåé ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß")
st.caption("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå/‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ ‚Üí ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ AI  ‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®")

# ‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
missing = [p for p in [DATA_PATH, MODEL_PATH, ENC_PATH] if not Path(p).exists()]
if missing:
    st.error("‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö:\n" + "\n".join(f"- {p}" for p in missing))
    st.stop()

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/‡πÇ‡∏°‡πÄ‡∏î‡∏•
df = pd.read_csv(DATA_PATH)
model = joblib.load(MODEL_PATH)
le    = joblib.load(ENC_PATH)

st.write(f"üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(df):,} ‡πÅ‡∏ñ‡∏ß")
with st.expander("‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (5 ‡πÅ‡∏ñ‡∏ß)"):
    st.dataframe(df.head(5), use_container_width=True)

# ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
st.subheader("üëÆ‚Äç‚ôÄÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
latest = df.tail(200).reset_index(drop=True)

left, right = st.columns([1,1])
with left:
    st.markdown("**‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå (200 ‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)**")
    idx = st.number_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÅ‡∏ñ‡∏ß:", min_value=0, max_value=len(latest)-1, value=len(latest)-1, step=1)
    row = latest.iloc[int(idx)].to_dict()

with right:
    st.markdown("**‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏á (‡∏ó‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ)**")
    mag  = st.number_input("magnitude", value=float(row.get("magnitude", 5.0)))
    dep  = st.number_input("depth",     value=float(row.get("depth", 10.0)))
    cdi  = st.number_input("cdi",       value=float(row.get("cdi", 3.0)))
    mmi  = st.number_input("mmi",       value=float(row.get("mmi", 3.0)))
    sig  = st.number_input("sig",       value=float(row.get("sig", 300.0)))
    inputs = pd.DataFrame([{
        "magnitude": mag, "depth": dep, "cdi": cdi, "mmi": mmi, "sig": sig
    }])

if st.button("üß† ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ AI", use_container_width=True):
    X = inputs[["magnitude","depth","cdi","mmi","sig"]]
    y_id = model.predict(X)[0]
    y_label = le.inverse_transform([y_id])[0]
    st.success(f"‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: **{y_label.upper()}**")
    st.session_state["last_pred"] = {
        "risk": y_label,
        "inputs": inputs.iloc[0].to_dict(),
        "region": str(row.get("place","Affected area"))  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå place ‡∏à‡∏∞‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
    }

# ‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® ‚Üí ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON
if "last_pred" in st.session_state:
    st.divider()
    st.subheader("üì¢ ‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® (‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)")
    pred = st.session_state["last_pred"]
    region = st.text_input("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà/‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ", value=pred["region"])
    msg_default = f"‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏±‡πà‡∏ô‡∏™‡∏∞‡πÄ‡∏ó‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö {pred['risk'].upper()} ‚Äî ‡πÇ‡∏õ‡∏£‡∏î‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"
    message = st.text_area("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®", value=msg_default, height=80)
    tips = ["‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ï‡πâ‡πÇ‡∏ï‡πä‡∏∞/‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á", "‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏•‡∏¥‡∏ü‡∏ï‡πå/‡∏Å‡∏£‡∏∞‡∏à‡∏Å", "‡∏õ‡∏¥‡∏î‡πÅ‡∏Å‡πä‡∏™/‡πÑ‡∏ü‡∏ü‡πâ‡∏≤"]

    if st.button("‚úÖ ‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®", type="primary", use_container_width=True):
        os.makedirs("storage", exist_ok=True)
        doc = {"last_updated": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
               "announcements": [{
                   "id": str(int(time.time())),
                   "region": region,
                   "risk_level": pred["risk"],
                   "message": message,
                   "tips": tips,
                   "inputs": pred["inputs"]
               }]}
        with open(ANN_PATH, "w", encoding="utf-8") as f:
            json.dump(doc, f, ensure_ascii=False, indent=2)
        st.success("‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÑ‡∏õ‡∏î‡∏π‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ üëá")

# ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® (‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÄ‡∏´‡πá‡∏ô)
st.divider()
st.subheader("üö® ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® (‡πÅ‡∏™‡∏î‡∏á‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô)")
if not Path(ANN_PATH).exists():
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
else:
    ann = json.load(open(ANN_PATH, encoding="utf-8"))
    st.caption(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {ann['last_updated']}")
    for a in ann["announcements"]:
        color = {"green":"üü¢","yellow":"üü°","orange":"üü†","red":"üî¥"}.get(a["risk_level"], "üî∂")
        st.markdown(f"### {color} ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: **{a['risk_level'].upper()}**")
        st.write(f"‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: **{a.get('region','-')}**")
        st.write(a["message"])
        st.write("‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
        for t in a.get("tips", []):
            st.write(f"- {t}")

